/**
 * 複数の型のいずれかを格納したい場合
 * 共用体を使う
 * ⇒メンバ内で宣言されたものの中で一番大きいデータ型の
 * 記憶領域を割り当てられる
 * ⇒多くのデータ型の値を複数扱えるが、同時に複数のメンバを使用することはできない
 * ⇒ どれか1つを書き換えた場合、残りも同じ値に書き換わる
 * 例)
 * char x, short y, int z;を宣言した時、
 * 共用体では4byteが割り当てられる(構造体の場合、1+2+4。ただし、複数メンバを同時に使える)
*/
#include <bits/stdc++.h>
using namespace std;

union Sample{
    int a;
    double b;
    short c;
};

int main(){
    union Sample p1;
    p1.a = 1;
    cout << format("c = {}\n", p1.c);
    p1.b = 1.1234;
    cout << format("b = {}\n", p1.b);
    /**
     * 共用体にどんなデータが入っているかを別途変数で保持
     * そのうえで読みだす際に条件分岐するのが一般的
    */
}